#!/usr/bin/env python3

from collections import defaultdict
import argparse
import logging
import os
import pickle


logger = logging.getLogger()


def build_parser():
    parser = argparse.ArgumentParser(
        description="Build pickled logs for orion-viz")

    parser.add_argument("--input-dir",  default="data/raw",
                        help="folder where to find trials")

    parser.add_argument("--output-dir",  default="data/cured",
                        help="folder where to save cured trials")

    parser.add_argument(
        '-v', '--verbose', action='count', default=0,
        help="Print informations about the process.\n"
             "     -v: INFO\n"
             "     -vv: DEBUG")

    return parser


def parse_args(argv):
    opt = build_parser().parse_args(argv)

    if opt.verbose == 0:
        logging.basicConfig(level=logging.WARNING)
        logger.setLevel(level=logging.WARNING)
    elif opt.verbose == 1:
        logging.basicConfig(level=logging.INFO)
        logger.setLevel(level=logging.INFO)
    elif opt.verbose == 2:
        logging.basicConfig(level=logging.DEBUG)
        logger.setLevel(level=logging.DEBUG)

    return opt


def load_trials(input_dir):
    for root, dirs, files in os.walk(input_dir):
        for filename in files:
            file_path = os.path.join(root, filename)
            with open(file_path, 'rb') as f:
                trials = pickle.load(f)
                yield filename, trials


def cure_bad_result(trials):

    def _cure_results(results, bad_value):
        result = get_objective(results)
        if result['type'] == 'objective' and result['value'] == 1.0:  # is None:
            result['value'] = bad_value

    if not trials:
        return []

    values = []
    for trial in trials:
        values.append(get_objective(trial['results'])['value'])

    bad_result = max(values)

    cured_trials = []
    for trial in trials:

        if "results" not in trial:
            continue

        cured_trials.append(trial)

        _cure_results(trial['results'], bad_result)

    return cured_trials


def cure_validation_accuracy(trials):

    def _cure_results(results):
        for result in results:
            if result['name'] == 'validation_accuracy':
                result['value'] = 100 - result['value']
                result['name'] = 'validation_error_rate'

    cured_trials = []
    for trial in trials:

        if "results" not in trial:
            continue

        cured_trials.append(trial)

        _cure_results(trial['results'])

        if not trial['dynamic']:
            continue

        for step in trial['dynamic']:
            _cure_results(step['results'])

    return cured_trials


def get_objective(results):
    for result in results:
        if result['type'] == 'objective':
            return result

    raise RuntimeError("Did not find any objective in the results")


def cure_static_objective(trials):
    if not trials:
        return []

    random_value = get_objective(trials[0]['results'])['value']
    if all(get_objective(trial['results'])['value'] == random_value for trial in trials):
        return []

    return trials


def compile_param_values(trials):
    param_values = defaultdict(set)
    for trial in trials:
        for param in trial['params']:
            param_values[param['name']].add(param['value'])

    return param_values


def remove_param(trials, name):
    for trial in trials:
        for i, param in list(enumerate(trial['params'])):
            if param['name'] == name:
                del trial['params'][i]


def cure_static_params(trials):

    param_values = compile_param_values(trials)

    for name, values in param_values.items():
        if len(values) < 2:
            remove_param(trials, name)

    return trials


def downsample_bad_results(trials):
    pass


def save_trials(file_path, trials):
    if os.path.exists(file_path):
        raise RuntimeError("Cannot overwrite file %s" % file_path)

    with open(file_path, 'wb') as f:
        pickle.dump(trials, f, protocol=2)


def main(argv=None):
    opt = parse_args(argv)

    if not os.path.isdir(opt.output_dir):
        os.mkdir(opt.output_dir)

    for file_name, trials in load_trials(opt.input_dir):
        logger.info("Curating %s" % file_name)
        # Turn train/validation_accuracy into error_rate
        cured_trials = cure_validation_accuracy(trials)
        # Replace bad results None with actual worst result found
        cured_trials = cure_bad_result(cured_trials)
        # Drop all trials if objective does not change
        cured_trials = cure_static_objective(cured_trials)
        # Flush h-p when they never change value
        cured_trials = cure_static_params(cured_trials)
        # Remove files if not empty
        if cured_trials:
            save_trials(os.path.join(opt.output_dir, file_name), cured_trials)
        else:
            logger.warning("Dropping %s" % file_name)


if __name__ == "__main__":
    main()
