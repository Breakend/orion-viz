#!/usr/bin/env python3
import argparse
import logging
import os
import pickle

import numpy

from orion.core.worker.trial import Trial


logger = logging.getLogger()


def rosenbrock(*args):
    rval = 0
    for i in range(len(args) - 1):
        rval += 100 * (args[i + 1] - args[i]**2)**2 - (1 - args[i])**2

    return rval


def build_parser():
    parser = argparse.ArgumentParser(
        description="Build pickled logs for orion-viz")

    parser.add_argument("--output-dir",  default="data", help="folder where to save trials")

    parser.add_argument(
        '-v', '--verbose', action='count', default=0,
        help="Print informations about the process.\n"
             "     -v: INFO\n"
             "     -vv: DEBUG")

    return parser


def parse_args(argv):
    opt = build_parser().parse_args(argv)

    if opt.verbose == 0:
        logging.basicConfig(level=logging.WARNING)
        logger.setLevel(level=logging.WARNING)
    elif opt.verbose == 1:
        logging.basicConfig(level=logging.INFO)
        logger.setLevel(level=logging.INFO)
    elif opt.verbose == 2:
        logging.basicConfig(level=logging.DEBUG)
        logger.setLevel(level=logging.DEBUG)

    return opt


def build_trials(size, num=100):
    trials = []
    for i in range(num):
        values = list(numpy.random.uniform(-2.5, 2.5, size=size))
        result = rosenbrock(*values)

        trials.append(build_trial(values, result))

    return trials


def convert_int_to_char(integer):
    return chr(ord('`') + integer + 1)


def build_trial(values, result):

    params = []
    for i, param in enumerate(values):
        params.append(Trial.Param(
            name=convert_int_to_char(i),
            type="real",
            value=param).to_dict())

    results = [
        Trial.Result(
            name="rosenbrock",
            type="objective",
            value=result).to_dict()]

    trial = Trial(
        experiment='rosenbrock-%d' % len(params),
        status='completed',
        worker=None,
        submit_time=None,
        start_time=None,
        end_time=None,
        results=results,
        params=params)

    return trial.to_dict()


def main(argv=None):
    opt = parse_args(argv)

    file_path_template = os.path.join(opt.output_dir, 'rosenbrock-%d.pkl')
    for i in [2, 5, 10, 50]:
        trials = build_trials(i, num=100 * i)
        with open(file_path_template % i, 'wb') as f:
            pickle.dump(trials, f, protocol=2)


if __name__ == "__main__":
    main()
